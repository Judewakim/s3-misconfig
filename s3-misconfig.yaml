AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for S3 Security Scanner Lambda deployment

Parameters:
  ExcludeBuckets:
    Type: String
    Description: Comma-separated list of S3 bucket names (e.g., bucket1,bucket2)
    Default: ""
  InvocationMode:
    Type: String
    Description: "Choose the EventBridge invocation mode: 'scanning_only' or 'scanning_and_autoremediation'"
    Default: "scanning_only"
    AllowedValues:
      - "scanning_only"
      - "scanning_and_autoremediation"

Conditions:
  IsAutoRemediation: !Equals [!Ref InvocationMode, "scanning_and_autoremediation"]

Resources:
  # IAM Role for Lambda
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: S3SecurityScannerRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3SecurityScannerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - s3:ListAllMyBuckets
                  - s3:GetBucketAcl
                  - s3:GetBucketPolicy
                  - s3:GetBucketPublicAccessBlock
                  - s3:GetBucketEncryption
                  - s3:PutPublicAccessBlock
                  - s3:PutBucketAcl
                  - s3:PutBucketPolicy
                  - s3:PutBucketEncryption
                Resource: '*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  # Lambda Function
  S3SecurityScannerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: S3SecurityScanner
      Handler: s3-misconfig.lambda_handler
      Runtime: python3.8
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: judewakim-s3-misconfig  # Replace with your S3 bucket
        S3Key: code/s3-misconfig.zip     # Replace with your zip file name
      Timeout: 120  # 5 minute timeout (adjust if needed for many buckets)
      MemorySize: 128  # 128 MB (sufficient for MVP)

  # EventBridge Rule for Daily Trigger
  S3SecurityScannerRule:
    Type: AWS::Events::Rule
    Properties:
      Name: S3SecurityScannerDaily
      Description: Trigger S3 Security Scanner daily at 10 PM EDT based on chosen invocation mode
      ScheduleExpression: cron(0 2 * * ? *)  # Daily at 2 AM UTC (10 PM EDT)
      State: ENABLED
      Targets:
        - Arn: !GetAtt S3SecurityScannerFunction.Arn
          Id: S3SecurityScannerTarget
          Input: !Sub
            - |
              {
                "config": {
                  "exclude_buckets": ["${ExcludeBuckets}"]
                },
                "remediate": ${Remediate},
                "dry_run": ${DryRun}
              }
            - {
                Remediate: !If [IsAutoRemediation, "true", "false"],
                DryRun: !If [IsAutoRemediation, "false", "true"]
              }

  # Permission for EventBridge to invoke Lambda
  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref S3SecurityScannerFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt S3SecurityScannerRule.Arn

Outputs:
  LambdaFunctionArn:
    Description: ARN of the Lambda function
    Value: !GetAtt S3SecurityScannerFunction.Arn
  LambdaFunctionName:
    Description: Name of the Lambda function
    Value: !Ref S3SecurityScannerFunction